
import minerl
from typing import List, Sequence

from vpt.agent import MineRLAgent
from dyna.data.data_loader import DataLoader


class JointExpertDataset:
    """Loads data for each trajectory contiguously and each trajectory is labeled numerically with the task
    that it is associated with.
    """

    def __init__(self, dataloaders: Sequence[DataLoader]):
        # each dataloader corresponds to a unique task type.
        self.dataloaders = dataloaders

    def get_batch(self, task_index: int):
        # a batch is a contiguous set of observation, action pairs where 
        pass


class ExpertDatasetUnroller:
    """Generates a window of state embeddings generated by a MineRLAgent. The agent
    assumes that the trajectories are fed in contiguously. This class is meant to be iterated over!
    """

    def __init__(self, agent: MineRLAgent, window_size: int=4):
        self.agent = agent
        self.window_size = window_size

    def __iter__(self):
        self._iter = 0

        # TODO: reset the agent's internal state and populate these with a FULL TRAJECTORY!
        self.expert_observations = []
        self.expert_actions = []
        self._expert_pairs = zip(self.expert_observations, self.expert_actions)

        self.window = []

    def __next__(self, dont_yield: bool=False):
        is_first = self._iter == 0
        self._iter += 1

        # should auto-raise StopIteration
        expert_observation, expert_action = self._expert_pairs.__next__()

        # precompute the expert embeddings
        expert_embedding = self.agent.get_embedding(expert_observation)
        self.window.append((expert_embedding, expert_action))
        if len(self.window) > self.window_size:
            self.window.pop(0)

        if is_first:
            # let the window fully populate
            for _ in range(self.window_size - 1):
                self.__next__(dont_yield=True)

        if len(self.window) != self.window_size:
            raise ValueError(f"Unexpected window size. Got {len(self.window)}, expected: {self.window_size}")

        if not dont_yield:
            yield self.window

    def decompose_window(self, window: List):
        embeddings = []
        actions = []
        for embedding, action in window:
            embeddings.append(embedding)
            actions.append(action)
        return embeddings, actions